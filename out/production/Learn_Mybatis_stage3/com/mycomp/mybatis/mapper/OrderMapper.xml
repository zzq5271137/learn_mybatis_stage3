<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    一对多的相关操作
 -->

<mapper namespace="com.mycomp.mybatis.mapper.OrderMapper">

    <!-- 对LEFT JOIN查询的结果集进行映射, 方式一 -->
    <resultMap id="orderMapType1" type="com.mycomp.mybatis.domain.Order">
        <id column="order_id" property="order_id"/>
        <result column="order_name" property="order_name"/>
        <result column="order_num" property="order_num"/>

        <!-- 使用级联的方式, 对Order对象中的Customer对象属性进行映射 -->
        <result column="cust_id" property="customer.cust_id"/>
        <result column="cust_name" property="customer.cust_name"/>
        <result column="cust_profession" property="customer.cust_profession"/>
        <result column="cust_phone" property="customer.cust_phone"/>
        <result column="email" property="customer.email"/>
    </resultMap>

    <!-- 对LEFT JOIN查询的结果集进行映射, 方式二 -->
    <!-- 使用association这种方式能够支持分步查询 -->
    <resultMap id="orderMapType2" type="com.mycomp.mybatis.domain.Order">
        <id column="order_id" property="order_id"/>
        <result column="order_name" property="order_name"/>
        <result column="order_num" property="order_num"/>

        <!-- 使用association, 对Order对象中的Customer对象属性进行映射 -->
        <association property="customer"
                     javaType="com.mycomp.mybatis.domain.Customer">
            <id column="cust_id" property="cust_id"/>
            <result column="cust_name" property="cust_name"/>
            <result column="cust_profession" property="cust_profession"/>
            <result column="cust_phone" property="cust_phone"/>
            <result column="email" property="email"/>
        </association>
    </resultMap>

    <!-- 查询所有的Order, 并且查询出所有相应的Customer -->
    <select id="getAllOrders" resultMap="orderMapType2">
        SELECT *
        FROM `order` AS o
                 LEFT JOIN `customer` AS c ON o.cust_id = c.cust_id
    </select>

    <!-- 分步查询的结果集 -->
    <!-- 分步查询支持懒加载(需要去核心配置文件中的settings里配置lazyLoadingEnabled) -->
    <resultMap id="orderMapType3" type="com.mycomp.mybatis.domain.Order">
        <id column="order_id" property="order_id"/>
        <result column="order_name" property="order_name"/>
        <result column="order_num" property="order_num"/>

        <!-- 执行完第一条语句后, 执行select属性指定的名称空间中的getCustomerByIdCust语句 -->
        <!-- 并将第一条语句的执行结果中的cust_id作为参数传入第二条语句(column属性) -->
        <association property="customer"
                     javaType="com.mycomp.mybatis.domain.Customer"
                     select="com.mycomp.mybatis.mapper.CustomerMapper.getCustomerByIdCust"
                     column="cust_id"/>
    </resultMap>

    <!-- 分步查询 -->
    <select id="getOrderById" resultMap="orderMapType3">
        SELECT *
        FROM `order`
        WHERE order_id = #{id}
    </select>

    <!-- 插入一条订单信息, 并关联好相应的外键 -->
    <insert id="insertOrder" parameterType="com.mycomp.mybatis.domain.Order"
            useGeneratedKeys="true" keyProperty="order_id" keyColumn="order_id">
        INSERT INTO `order` (order_name, order_num, cust_id)
        VALUES (#{order_name}, #{order_num}, #{customer.cust_id})
    </insert>

    <!-- 根据cust_id查询订单 -->
    <select id="getOrderByCustId" resultType="com.mycomp.mybatis.domain.Order">
        SELECT *
        FROM `order`
        WHERE cust_id = #{id}
    </select>

    <!-- 更新关系 -->
    <update id="updateOrderCustId">
        UPDATE `order`
        SET cust_id = #{cust_id}
        WHERE order_id = #{order_id}
    </update>

    <!-- 打破关系 -->
    <update id="updateRelation">
        UPDATE `order`
        SET cust_id = NULL
        WHERE cust_id = #{cust_id}
    </update>

</mapper>