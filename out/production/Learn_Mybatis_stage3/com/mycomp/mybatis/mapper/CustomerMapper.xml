<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mycomp.mybatis.mapper.CustomerMapper">
    <!-- 输出简单类型(查询总数) -->
    <select id="getCount" resultType="Integer">
        SELECT COUNT(*) FROM customer
    </select>

    <!-- 输出对象, (根据id获取用户) -->
    <select id="getCustomerByIdCust"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT * FROM customer WHERE cust_id = #{id}
    </select>

    <!-- 输出Map类型, 方式一, (根据id获取用户) -->
    <select id="getCustomerByIdMap" resultType="Map">
        SELECT * FROM customer WHERE cust_id = #{id}
    </select>

    <!-- 输出Map类型, 方式二, 以cust_id为Map的key, (获取所有的用户) -->
    <select id="getAllCustomerCase1" resultType="Map">
        SELECT * FROM customer
    </select>

    <!-- 输出Map类型, 方式二, 以cust_name为Map的key, (获取所有的用户) -->
    <select id="getAllCustomerCase2" resultType="Map">
        SELECT * FROM customer
    </select>

    <!--
        如果数据库中的字段和domain中的字段不一致, 但是又想直接输出封装好的对象,
        可以自己配置一个resultMap, 去代替resultType
     -->
    <resultMap id="customerMap" type="com.mycomp.mybatis.domain.Customer">
        <id column="cust_id" property="cust_id_c"/>
        <result column="cust_name" property="cust_name_c"/>
        <result column="cust_profession" property="cust_profession_c"/>
        <result column="cust_phone" property="cust_phone_c"/>
        <result column="email" property="email_c"/>
    </resultMap>

    <!-- 插入一条客户信息 -->
    <insert id="insertCustomer"
            parameterType="com.mycomp.mybatis.domain.Customer"
            useGeneratedKeys="true" keyProperty="cust_id" keyColumn="cust_id">
        INSERT INTO customer (cust_name, cust_profession, cust_phone, email)
        VALUES (#{cust_name}, #{cust_profession}, #{cust_phone}, #{email})
    </insert>

    <!-- 采用左连接的方式, 查询所有的用户, 并查询出其相关联的订单 -->
    <select id="getAllCustomers1" resultMap="custOrderMap1">
        SELECT * FROM customer AS c LEFT JOIN `order` o ON c.cust_id = o.cust_id
    </select>
    <resultMap id="custOrderMap1" type="com.mycomp.mybatis.domain.Customer">
        <id column="cust_id" property="cust_id"/>
        <result column="cust_name" property="cust_name"/>
        <result column="cust_profession" property="cust_profession"/>
        <result column="cust_phone" property="cust_phone"/>
        <result column="email" property="email"/>

        <collection property="orders" ofType="com.mycomp.mybatis.domain.Order">
            <id column="order_id" property="order_id"/>
            <result column="order_name" property="order_name"/>
            <result column="order_num" property="order_num"/>
        </collection>
    </resultMap>

    <!-- 采用分步查询的方式, 查询所有的用户, 并查询出其相关联的订单 -->
    <select id="getAllCustomers2" resultMap="custOrderMap2">
        SELECT * FROM customer
    </select>
    <resultMap id="custOrderMap2" type="com.mycomp.mybatis.domain.Customer">
        <id column="cust_id" property="cust_id"/>
        <result column="cust_name" property="cust_name"/>
        <result column="cust_profession" property="cust_profession"/>
        <result column="cust_phone" property="cust_phone"/>
        <result column="email" property="email"/>

        <collection property="orders" javaType="List"
                    ofType="com.mycomp.mybatis.domain.Order"
                    select="com.mycomp.mybatis.mapper.OrderMapper.getOrderByCustId"
                    column="cust_id"/>
    </resultMap>

    <!-- 根据id删除一个客户 -->
    <delete id="deleteCustomer">
        DELETE FROM customer WHERE cust_id = #{id}
    </delete>

</mapper>